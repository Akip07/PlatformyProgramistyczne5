package GUI;



import main.Problem;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class KnapsackGUI {
    private JFrame frame;
    private JTextField numberField;
    private JTextField seedField;
    private JTextField capacityField;
    private JTextArea itemsTextArea;
    private JTextArea resultTextArea;
    private JButton button;

    public KnapsackGUI() {
        frame = new JFrame("KnapsackGUI");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);  // Adjusted size for better visibility
        frame.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(4, 2));

        inputPanel.add(new JLabel("Number"));
        numberField = new JTextField("20");
        inputPanel.add(numberField);

        inputPanel.add(new JLabel("Seed"));
        seedField = new JTextField("1");
        inputPanel.add(seedField);

        inputPanel.add(new JLabel("Capacity"));
        capacityField = new JTextField("40");
        inputPanel.add(capacityField);

        button = new JButton("Button");
        inputPanel.add(button);

        frame.add(inputPanel, BorderLayout.NORTH);

        itemsTextArea = new JTextArea();
        itemsTextArea.setEditable(false);
        JScrollPane itemsScrollPane = new JScrollPane(itemsTextArea);

        resultTextArea = new JTextArea();
        resultTextArea.setEditable(false);
        JScrollPane resultScrollPane = new JScrollPane(resultTextArea);

        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, itemsScrollPane, resultScrollPane);
        splitPane.setResizeWeight(0.7);  // Allocate 70% of the width to itemsTextArea

        frame.add(splitPane, BorderLayout.CENTER);

        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generateItems();
            }
        });

        frame.setVisible(true);
    }

    private void generateItems() {
        int seed = Integer.parseInt(seedField.getText());
        int n = Integer.parseInt(numberField.getText());
        int cap = Integer.parseInt(capacityField.getText());

        Problem p = new Problem(n, seed, 1, 10);


        StringBuilder itemsBuilder = new StringBuilder();
        for (int i = 0; i < 20; i++) {
            itemsBuilder.append("No: ").append(i)
                    .append(" v: ").append((int) (Math.random() * 10) + 1)
                    .append(" w: ").append((int) (Math.random() * 10) + 1)
                    .append("\n");
        }
        itemsTextArea.setText(p.toString());

        resultTextArea.setText(p.Solve(cap).toString());
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(KnapsackGUI::new);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }
}

